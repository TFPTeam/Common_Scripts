include "commonscripts.gs"class Monovista isclass TrainzGameObject{    public Browser go_Analyzer;    public Browser go_Debbuger;    Train o_Train;    Vehicle o_Vehicle = null;    Locomotive o_Locomotive = null;    Vehicle[] o_trainVehicles;    int i_left=100, i_top=100, i_bottom=500, i_right=600;    bool b_switcher;    bool b_isloco;    float f_cos_beta;    // pokud bych je umístil do Core a odkázal se na nì Global.gb_log...nedošlo by k chybì syntaxe, ale hra by vyhodil ER_NullReference    public bool gb_log1=false;    public bool gb_log2=false;    public bool gb_log3=false;    public bool gb_log4=false;    public bool gb_log5=false;    public bool gb_log6=false;    public bool gb_log7=false;    public bool gb_log8=false;    public bool gb_log9=false;    public bool gb_log10=false;    public bool gb_log11=false;    public bool gb_log12=false;    public bool gb_log13=false;    public bool gb_log14=false;    public bool gb_log15=false;    public bool gb_log16=false;    public bool gb_log17=false;    public bool gb_log18=false;    public bool gb_log19=false;    public bool gb_log20=false;    public bool gb_log21=false;    public bool gb_log22=false;    public bool gb_log23=false;    public bool gb_log24=false;    public bool gb_log25=false;    public bool gb_log26=false;    public bool gb_log27=false;    public bool gb_log28=false;    public bool gb_log29=false;                        public bool gb_log30=false;    bool[] ab_logs = new bool[0];        string s_log1;    string s_log2;    string s_log3;    string s_log4;    string s_log5;    string s_log6;    string s_log7;    string s_log8;    string s_log9;    string s_log10;    string s_log11;    string s_log12;    string s_log13;    string s_log14;    string s_log15;    string s_log16;    string s_log17;    string s_log18;    string s_log19;    string s_log20;    string s_log21;    string s_log22;    string s_log23;    string s_log24;    string s_log25;    string s_log26;    string s_log27;    string s_log28;    string s_log29;    string s_log30;                 string[] as_logs = new string[0];              // prototypy funkcí    public void MonovistaLocomotive(Locomotive op_Locomotive, Soup op_logNames);    public void MonovistaVehicle(Vehicle op_Vehicle, Soup op_logNames);    void LogNames(Soup Data);    public void MonovistaDimensions(int ip_left, int ip_top, int ip_bottom, int ip_right);      public void MonovistaSwitcher(string sp_type, bool bp_state);     void Debug();        string DebugHTML();    public void MonovistaHandler(Message msg);    void LogValues(string minor);    thread void Analysis();    string AnalysisHTML();            public void MonovistaLocomotive(Locomotive op_Locomotive, Soup op_logNames)    {                // me == "tato tøída: Monovista"               o_Locomotive = op_Locomotive;        AddHandler(me,"Browser-URL", "", "MonovistaHandler");        AddHandler(me,"Browser-Closed", "", "MonovistaHandler");        LogNames(op_logNames);        b_isloco=true;    }    public void MonovistaVehicle(Vehicle op_Vehicle, Soup op_logNames)    {        o_Vehicle = op_Vehicle;        AddHandler(me,"Browser-URL", "", "MonovistaHandler");        AddHandler(me,"Browser-Closed", "", "MonovistaHandler");        if(op_logNames != null) LogNames(op_logNames);        }    void LogNames(Soup Data)    {                 s_log1 = Data.GetNamedTag("log1");        s_log2 = Data.GetNamedTag("log2");        s_log3 = Data.GetNamedTag("log3");        s_log4 = Data.GetNamedTag("log4");        s_log5 = Data.GetNamedTag("log5");        s_log6 = Data.GetNamedTag("log6");        s_log7 = Data.GetNamedTag("log7");        s_log8 = Data.GetNamedTag("log8");        s_log9 = Data.GetNamedTag("log9");        s_log10 = Data.GetNamedTag("log10");        s_log11 = Data.GetNamedTag("log11");        s_log12 = Data.GetNamedTag("log12");        s_log13 = Data.GetNamedTag("log13");        s_log14 = Data.GetNamedTag("log14");        s_log15 = Data.GetNamedTag("log15");        s_log16 = Data.GetNamedTag("log16");        s_log17 = Data.GetNamedTag("log17");        s_log18 = Data.GetNamedTag("log18");        s_log19 = Data.GetNamedTag("log19");        s_log20 = Data.GetNamedTag("log20");        s_log21 = Data.GetNamedTag("log21");        s_log22 = Data.GetNamedTag("log22");        s_log23 = Data.GetNamedTag("log23");        s_log24 = Data.GetNamedTag("log24");        s_log25 = Data.GetNamedTag("log25");        s_log26 = Data.GetNamedTag("log26");        s_log27 = Data.GetNamedTag("log27");        s_log28 = Data.GetNamedTag("log28");        s_log29 = Data.GetNamedTag("log29");        s_log30 = Data.GetNamedTag("log30");                                          as_logs[as_logs.size()] = s_log1;        as_logs[as_logs.size()] = s_log2;        as_logs[as_logs.size()] = s_log3;        as_logs[as_logs.size()] = s_log4;        as_logs[as_logs.size()] = s_log5;        as_logs[as_logs.size()] = s_log6;        as_logs[as_logs.size()] = s_log7;        as_logs[as_logs.size()] = s_log8;        as_logs[as_logs.size()] = s_log9;        as_logs[as_logs.size()] = s_log10;        as_logs[as_logs.size()] = s_log11;        as_logs[as_logs.size()] = s_log12;        as_logs[as_logs.size()] = s_log13;        as_logs[as_logs.size()] = s_log14;        as_logs[as_logs.size()] = s_log15;        as_logs[as_logs.size()] = s_log16;        as_logs[as_logs.size()] = s_log17;        as_logs[as_logs.size()] = s_log18;        as_logs[as_logs.size()] = s_log19;        as_logs[as_logs.size()] = s_log20;        as_logs[as_logs.size()] = s_log21;        as_logs[as_logs.size()] = s_log22;        as_logs[as_logs.size()] = s_log23;        as_logs[as_logs.size()] = s_log24;        as_logs[as_logs.size()] = s_log25;        as_logs[as_logs.size()] = s_log26;        as_logs[as_logs.size()] = s_log27;        as_logs[as_logs.size()] = s_log28;        as_logs[as_logs.size()] = s_log29;        as_logs[as_logs.size()] = s_log30;                                 ab_logs[ab_logs.size()] = gb_log1;        ab_logs[ab_logs.size()] = gb_log2;        ab_logs[ab_logs.size()] = gb_log3;        ab_logs[ab_logs.size()] = gb_log4;        ab_logs[ab_logs.size()] = gb_log5;        ab_logs[ab_logs.size()] = gb_log6;        ab_logs[ab_logs.size()] = gb_log7;        ab_logs[ab_logs.size()] = gb_log8;        ab_logs[ab_logs.size()] = gb_log9;        ab_logs[ab_logs.size()] = gb_log10;        ab_logs[ab_logs.size()] = gb_log11;        ab_logs[ab_logs.size()] = gb_log12;        ab_logs[ab_logs.size()] = gb_log13;        ab_logs[ab_logs.size()] = gb_log14;        ab_logs[ab_logs.size()] = gb_log15;        ab_logs[ab_logs.size()] = gb_log16;        ab_logs[ab_logs.size()] = gb_log17;        ab_logs[ab_logs.size()] = gb_log18;        ab_logs[ab_logs.size()] = gb_log19;        ab_logs[ab_logs.size()] = gb_log20;        ab_logs[ab_logs.size()] = gb_log21;        ab_logs[ab_logs.size()] = gb_log22;        ab_logs[ab_logs.size()] = gb_log23;        ab_logs[ab_logs.size()] = gb_log24;        ab_logs[ab_logs.size()] = gb_log25;        ab_logs[ab_logs.size()] = gb_log26;        ab_logs[ab_logs.size()] = gb_log27;        ab_logs[ab_logs.size()] = gb_log28;        ab_logs[ab_logs.size()] = gb_log29;        ab_logs[ab_logs.size()] = gb_log30;                               }    public void MonovistaDimensions(int ip_left, int ip_top, int ip_bottom, int ip_right)    {        i_left=ip_left;        i_top=ip_top;        i_right=ip_right;        i_bottom=ip_bottom;    }        public void MonovistaSwitcher(string sp_type, bool bp_state)    {        if(sp_type == "Debug")        {            b_switcher=bp_state;            if(b_switcher and go_Debbuger == null) Debug();           }        if(sp_type == "Analysis")        {            b_switcher=bp_state;            if(b_switcher and go_Analyzer == null) Analysis();         }              }    void Debug()    {        go_Debbuger=Constructors.NewBrowser(); 	    go_Debbuger.SetWindowRect(i_left, i_top, i_right, i_bottom);                 go_Debbuger.SetWindowVisible(true);           Interface.Print("Monovista: Debug opened");        go_Debbuger.LoadHTMLString(DebugHTML());    }    string DebugHTML()    {        string HTML;        string Log;                Log=Log+        "<tr>"+            "<td align=center colspan=4><font color=#000000>Switcher for logging</font></td>"+        "</tr>";        int l;        for(l=0; l < as_logs.size(); l++)        {            if(as_logs[l] != "")            {                Log=Log+                    "<tr>"+                    "<td align=left valign=center>"+                        "<font color=#000000>Log "+(l+1)+": "+as_logs[l]+"</font></td>"+                    "</td>"+                    "<td align=right valign=center>"+                        "<font color=#000000>"+HTMLWindow.RadioButton("live://id_log/"+(l+1)+"/0",ab_logs[l]==false)+"OFF</font>"+                    "</td>"+                                            "<td align=center valign=center width=10px><font color=#000000>|</font></td>"+                                                   "<td align=left valign=center>"+                        "<font color=#000000>ON"+HTMLWindow.RadioButton("live://id_log/"+(l+1)+"/1",ab_logs[l]==true)+"</font>"+                    "</td>"+                "</tr>";                            }                    }               return HTML="<html><body><table bgcolor=#ffff00 width=100%>"+Log+"</table></body></html>";    }    public void MonovistaHandler(Message msg)    {        if(msg.src == go_Debbuger or msg.src == go_Analyzer)        {            //GameObject odesilatel = cast<GameObject>msg.src;            //Interface.Print("MonovistaHandler("+odesilatel.GetName()+": "+msg.major+" - "+msg.minor+")");                        if(msg.major == "Browser-Closed")            {                if (msg.src == go_Analyzer)              		{                    go_Analyzer = null;                    		}                if (msg.src == go_Debbuger)              		{                    Interface.Print("Monovista: Debug closed");                    go_Debbuger = null;                    		}            }                                if(msg.major == "Browser-URL")            {                LogValues(msg.minor);                }        }    }    void LogValues(string minor)    {        //Interface.Print(minor);        string[] id = Str.Tokens(minor[6, ],"/");        if(id[0] == "id_log")        {                       if(id[1]=="1") { if(id[2] == "1") gb_log1=true; else gb_log1=false; }            if(id[1]=="2") { if(id[2] == "1") gb_log2=true; else gb_log2=false; }            if(id[1]=="3") { if(id[2] == "1") gb_log3=true; else gb_log3=false; }            if(id[1]=="4") { if(id[2] == "1") gb_log4=true; else gb_log4=false; }            if(id[1]=="5") { if(id[2] == "1") gb_log5=true; else gb_log5=false; }            if(id[1]=="6") { if(id[2] == "1") gb_log6=true; else gb_log6=false; }            if(id[1]=="7") { if(id[2] == "1") gb_log7=true; else gb_log7=false; }            if(id[1]=="8") { if(id[2] == "1") gb_log8=true; else gb_log8=false; }            if(id[1]=="9") { if(id[2] == "1") gb_log9=true; else gb_log9=false; }            if(id[1]=="10") { if(id[2] == "1") gb_log10=true; else gb_log10=false; }            if(id[1]=="11") { if(id[2] == "1") gb_log11=true; else gb_log11=false; }            if(id[1]=="12") { if(id[2] == "1") gb_log12=true; else gb_log12=false; }            if(id[1]=="13") { if(id[2] == "1") gb_log13=true; else gb_log13=false; }            if(id[1]=="14") { if(id[2] == "1") gb_log14=true; else gb_log14=false; }            if(id[1]=="15") { if(id[2] == "1") gb_log15=true; else gb_log15=false; }            if(id[1]=="16") { if(id[2] == "1") gb_log16=true; else gb_log16=false; }            if(id[1]=="17") { if(id[2] == "1") gb_log17=true; else gb_log17=false; }            if(id[1]=="18") { if(id[2] == "1") gb_log18=true; else gb_log18=false; }            if(id[1]=="19") { if(id[2] == "1") gb_log19=true; else gb_log19=false; }            if(id[1]=="20") { if(id[2] == "1") gb_log20=true; else gb_log20=false; }            if(id[1]=="21") { if(id[2] == "1") gb_log21=true; else gb_log21=false; }            if(id[1]=="22") { if(id[2] == "1") gb_log22=true; else gb_log22=false; }            if(id[1]=="23") { if(id[2] == "1") gb_log23=true; else gb_log23=false; }            if(id[1]=="24") { if(id[2] == "1") gb_log24=true; else gb_log24=false; }            if(id[1]=="25") { if(id[2] == "1") gb_log25=true; else gb_log25=false; }            if(id[1]=="26") { if(id[2] == "1") gb_log26=true; else gb_log26=false; }            if(id[1]=="27") { if(id[2] == "1") gb_log27=true; else gb_log27=false; }            if(id[1]=="28") { if(id[2] == "1") gb_log28=true; else gb_log28=false; }            if(id[1]=="29") { if(id[2] == "1") gb_log29=true; else gb_log29=false; }            if(id[1]=="30") { if(id[2] == "1") gb_log30=true; else gb_log30=false; }                                          }            ab_logs = new bool[0];        ab_logs[ab_logs.size()] = gb_log1;        ab_logs[ab_logs.size()] = gb_log2;        ab_logs[ab_logs.size()] = gb_log3;        ab_logs[ab_logs.size()] = gb_log4;        ab_logs[ab_logs.size()] = gb_log5;        ab_logs[ab_logs.size()] = gb_log6;        ab_logs[ab_logs.size()] = gb_log7;        ab_logs[ab_logs.size()] = gb_log8;        ab_logs[ab_logs.size()] = gb_log9;        ab_logs[ab_logs.size()] = gb_log10;        ab_logs[ab_logs.size()] = gb_log11;        ab_logs[ab_logs.size()] = gb_log12;        ab_logs[ab_logs.size()] = gb_log13;        ab_logs[ab_logs.size()] = gb_log14;        ab_logs[ab_logs.size()] = gb_log15;        ab_logs[ab_logs.size()] = gb_log16;        ab_logs[ab_logs.size()] = gb_log17;        ab_logs[ab_logs.size()] = gb_log18;        ab_logs[ab_logs.size()] = gb_log19;        ab_logs[ab_logs.size()] = gb_log20;        ab_logs[ab_logs.size()] = gb_log21;        ab_logs[ab_logs.size()] = gb_log22;        ab_logs[ab_logs.size()] = gb_log23;        ab_logs[ab_logs.size()] = gb_log24;        ab_logs[ab_logs.size()] = gb_log25;        ab_logs[ab_logs.size()] = gb_log26;        ab_logs[ab_logs.size()] = gb_log27;        ab_logs[ab_logs.size()] = gb_log28;        ab_logs[ab_logs.size()] = gb_log29;        ab_logs[ab_logs.size()] = gb_log30;                                          if(go_Debbuger) go_Debbuger.LoadHTMLString(DebugHTML());                          }        thread void Analysis()    {		go_Analyzer=Constructors.NewBrowser(); 	    go_Analyzer.SetWindowRect(i_left, i_top, i_right, i_bottom);                 go_Analyzer.SetWindowVisible(true);            Interface.Print("Monovista: Analyzer opened");        while(go_Analyzer)        {                                                if(go_Analyzer == null) break;            if(!b_switcher) break;            go_Analyzer.LoadHTMLString(AnalysisHTML());            Sleep(0.1);                                                     }            Interface.Print("Monovista: Analyzer closed");                if (go_Analyzer != null)        {             go_Analyzer=null;        }            b_switcher=false;            }    string AnalysisHTML()    {                string HTML;        string Header;        string Enginespec, Control, Ai, Ether;         string tbm_result, tcm_result, pant_result, brake_lap, train_brake, loco_brake, dynamic_brake, equ_reser, main_reser, aux_reser, brake_cyl, map_object;                if(b_isloco)        {            o_Train = o_Locomotive.GetMyTrain();                o_trainVehicles = o_Train.GetVehicles();              }        else        {              o_Train = o_Vehicle.GetMyTrain();            o_trainVehicles = o_Train.GetVehicles();            }                                                     if (o_Train.GetTrainBrakes() == 0) tbm_result="Train brakes are released.";        else if (o_Train.GetTrainBrakes() == 1) tbm_result="Train brakes are in initial mode.";        else if (o_Train.GetTrainBrakes() == 2) tbm_result="Train brakes are applied.";        else if (o_Train.GetTrainBrakes() == 3) tbm_result="Train brake handle is off.";        else if (o_Train.GetTrainBrakes() == 4) tbm_result="Train brakes are in emergency stop position.";        else tbm_result="Train brakes are in the lap position.";                         if(o_Train.GetAutopilotMode()==1) tcm_result="User controls train, script can change settings";        else if(o_Train.GetAutopilotMode()==2) tcm_result="Autopilot controls train.";        else if(o_Train.GetAutopilotMode()==3) tcm_result="User controls train, autopilot takes over when train is not currently 'focused'.";                else tcm_result="Only the script can control the train.";                if(b_isloco)        {            if(o_Train.GetPantographState() == 0) pant_result="Both pantographs down.";            else if(o_Train.GetPantographState() == 1) pant_result="Front pantograph up.";            else if(o_Train.GetPantographState() == 2) pant_result="Rear pantograph up.";            else pant_result = "Both pantographs up.";                    }        if(b_isloco)        {            train_brake = (((o_Locomotive.GetEngineParam("brake-pipe-pressure")/0.0000703)-14.7)*6.89475729)/100;            brake_lap = o_Locomotive.GetEngineSetting("train-lap-brake");                    loco_brake = o_Locomotive.GetEngineSetting("loco-auto-brake");            dynamic_brake = o_Locomotive.GetEngineSetting("dynamic-brake");            brake_cyl = (((o_Locomotive.GetEngineParam("brake-cylinder-pressure")/0.0000703)-14.7)*6.89475729)/100;            aux_reser = (((o_Locomotive.GetAuxReservoirPressure()/0.0000703)-14.7)*6.89475729)/100;            main_reser = (((o_Locomotive.GetEngineParam("main-reservoir-pressure")/0.0000703)-14.7)*6.89475729)/100;            equ_reser = (((o_Locomotive.GetEngineParam("equaliser-pressure")/0.0000703)-14.7)*6.89475729)/100;                    }        else        {            train_brake = (((o_Vehicle.GetEngineParam("brake-pipe-pressure")/0.0000703)-14.7)*6.89475729)/100;            brake_cyl = (((o_Vehicle.GetEngineParam("brake-cylinder-pressure")/0.0000703)-14.7)*6.89475729)/100;             equ_reser = (((o_Vehicle.GetEngineParam("equaliser-pressure")/0.0000703)-14.7)*6.89475729)/100;                                }        bool direction;        GSTrackSearch trackSearch;        if(b_isloco)        {            direction = o_Locomotive.GetDirectionRelativeToTrain(); // a.limfront je ve smìru jízdy == true / a.limback je ve smìru jízdy == false            trackSearch = o_Locomotive.BeginTrackSearch(direction);                    }        else        {            direction = o_Vehicle.GetDirectionRelativeToTrain(); // a.limfront je ve smìru jízdy == true / a.limback je ve smìru jízdy == false             trackSearch = o_Vehicle.BeginTrackSearch(direction);                      }                 MapObject mapObject = trackSearch.SearchNext();        GameObject GO = cast <GameObject> mapObject;        if(GO == null)        {             map_object="No object found ahead of train.";        }        else if (GO.isclass(Junction))        {            map_object = "Junction "+GO.GetName()+" -> "+trackSearch.GetDistance();            }        else if (GO.isclass(Signal))        {            map_object = "Signal "+GO.GetName()+" -> "+trackSearch.GetDistance();             }        else if (GO.isclass(Crossing))        {            map_object = "Crossing "+GO.GetName()+" -> "+trackSearch.GetDistance();             }        else if (GO.isclass(TrackMark))        {            map_object = "Trackmark "+GO.GetName()+" -> "+trackSearch.GetDistance();             }        else if (GO.isclass(Trigger))        {            map_object = "Trigger "+GO.GetName()+" -> "+trackSearch.GetDistance();             }        else if (GO.isclass(Vehicle))        {            Vehicle Veh = cast <Vehicle> GO;            map_object = "Vehicle ("+Veh.GetMyTrain().GetName()+") "+Veh.GetLocalisedName()+" -> "+trackSearch.GetDistance();             }        else if (GO.isclass(Industry))        {            map_object = "Industry "+GO.GetName()+" -> "+trackSearch.GetDistance();             }        else        {            map_object = "Unknown -> "+trackSearch.GetDistance();             }                       Train currentTrain = World.GetCurrentTrain();                                Header=Header+        "<tr bgcolor=#000000><td align=center colspan=2><font>Analyzer</font></td></tr>";        "<tr>"+            "<td><font>Local player name</font></td>"+            "<td align=center><font>"+World.GetLocalPlayerName()+"</font></td>"+        "</tr>";                   if(b_isloco)        {            Header=Header+            "<tr>"+                "<td><font>Locomotive name</font></td>"+                "<td align=center><font>"+o_Locomotive.GetLocalisedName()+"</font></td>"+            "</tr>";                          }        else        {            Header=Header+            "<tr>"+                "<td><font>Vehicle name</font></td>"+                "<td align=center><font>"+o_Vehicle.GetLocalisedName()+"</font></td>"+            "</tr>";                    }        Header=Header+         "<tr>"+            "<td><font>Train name</font></td>"+            "<td align=center><font>"+o_Train.GetName()+"</font></td>"+        "</tr>"+         "<tr>"+            "<td><font>Frontmost locomotive</font></td>"+            "<td align=center><font>"+o_Train.GetFrontmostLocomotive().GetLocalisedName()+"</font></td>"+        "</tr>"+        "<tr>"+            "<td><font>First / Last vehicle in train</font></td>"+            "<td align=center><font>"+o_trainVehicles[0].GetLocalisedName()+" / "+o_trainVehicles[o_trainVehicles.size()-1].GetLocalisedName()+"</font></td>"+        "</tr>"+        "<tr>";        if(b_isloco)        {            Header=Header+            "<tr>"+                "<td><font>Direction relative to train</font></td>"+                "<td align=center><font>"+o_Locomotive.GetDirectionRelativeToTrain()+"</font></td>"+            "</tr>";        }        else        {            Header=Header+            "<tr>"+                "<td><font>Direction relative to train</font></td>"+                "<td align=center><font>"+o_Vehicle.GetDirectionRelativeToTrain()+"</font></td>"+            "</tr>";        }                          if(o_Train.GetActiveDriver() != null)        {            Header=Header+            "<td><font>Active driver of train</font></td>"+            "<td align=center><font>"+o_Train.GetActiveDriver().GetLocalisedName()+"</font></td>";                    }        else        {            Header=Header+            "<td><font>Active driver of train</font></td>"+            "<td align=center><font>No driver is assigned to locomotives in train.</font></td>";                    }        Header=Header+"</tr>";                if(b_isloco)        {            Header=Header+"<tr>";            DriverCharacter driverCharacter=null;            DriverCharacter[] alldriverCharacters = World.GetDriverCharacterList();                      int s=0;            for(s=0; s < alldriverCharacters.size(); s++) // reaktivace Sniff            {                if(o_Locomotive == alldriverCharacters[s].GetLocation()) driverCharacter = alldriverCharacters[s];                                }                                if(driverCharacter != null)            {                Header=Header+                "<td><font>Driver of this locomotive</font></td>"+                "<td align=center><font>"+driverCharacter.GetLocalisedName()+"</font></td>";            }            else            {                Header=Header+                "<td><font>Driver of this locomotive</font></td>"+                "<td align=center><font>No driver assigned.</font></td>";                                                    }            Header=Header+"</tr>";        }        if(b_isloco)        {                    Enginespec=Enginespec+            "<tr bgcolor=#000000>"+                "<td align=center colspan=2><font>Enginespec</font></td>"+            "</tr>"+                       "<tr>"+                "<td><font>Applied force</font></td>"+                "<td align=center><font>"+o_Locomotive.GetEngineParam("applied-force")/1000+" kN</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Current drawn</font></td>"+                "<td align=center><font>"+o_Locomotive.GetEngineParam("current-drawn")+" A</font></td>"+            "</tr>";            Enginespec=Enginespec+             "<tr>"+                "<td><font>Maximum Traction Effort</font></td>"+                "<td align=center><font>"+o_Locomotive.GetMaximumTractiveEffort()/1000+" kN</font></td>"+            "</tr>"+             "<tr>"+                "<td><font>Main Reservoir</font></td>"+                "<td align=center><font>"+main_reser+" bar / "+o_Locomotive.GetEngineParam("main-reservoir-pressure")+" g/m3</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Auxiliary Reservoir</font></td>"+                "<td align=center><font>"+aux_reser+" bar / "+o_Locomotive.GetAuxReservoirPressure()+" g/m3</font></td>"+            "</tr>"+                          "<tr>"+                "<td><font>Equalizing Reservoir</font></td>"+                "<td align=center><font>"+equ_reser+" bar / "+o_Locomotive.GetEngineParam("equaliser-pressure")+" g/m3</font></td>"+            "</tr>";            Enginespec=Enginespec+                           "<tr>"+                "<td><font>Train Brake</font></td>"+                "<td align=center><font>"+train_brake+" bar / "+o_Locomotive.GetEngineParam("brake-pipe-pressure")+" g/m3</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Brake Cylinder</font></td>"+                "<td align=center><font>"+brake_cyl+" bar / "+o_Locomotive.GetEngineParam("brake-cylinder-pressure")+" g/m3</font></td>"+            "</tr>"+                    "<tr>"+                "<td><font>Train Brake - Lap</font></td>"+                "<td align=center><font>"+brake_lap+"</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Loco Brake</font></td>"+                "<td align=center><font>"+loco_brake+"</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Dynamic Brake</font></td>"+                "<td align=center><font>"+dynamic_brake+"</font></td>"+            "</tr>";            Enginespec=Enginespec+            "<tr>"+                "<td><font>Reverser</font></td>"+                "<td align=center><font>"+o_Locomotive.GetEngineSetting("reverser")+"</font></td>"+            "</tr>"+                          "<tr>"+                "<td><font>Throttle</font></td>"+                "<td align=center><font>"+o_Locomotive.GetEngineSetting("throttle")+"</font></td>"+            "</tr>"+              "<tr>"+                "<td><font>DCC</font></td>"+                "<td align=center><font>"+o_Train.GetDCCThrottle()+"</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Speed</font></td>"+                "<td align=center><font>"+(o_Train.GetTrainVelocity()*3.6)+"</font></td>"+            "</tr>";            Enginespec=Enginespec+            "<tr>"+                "<td><font>Wheelslip</font></td>"+                "<td align=center><font>"+o_Locomotive.GetEngineParam("wheelslip")+"</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Horn</font></td>"+                "<td align=center><font>"+o_Locomotive.GetEngineParam("horn")+"</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Bell</font></td>"+                "<td align=center><font>"+o_Train.GetBellState()+"</font></td>"+            "</tr>";                                                                                                                                       }        else        {            Enginespec=Enginespec+            "<tr>"+                "<td><font>Equalizing Reservoir</font></td>"+                "<td align=center><font>"+equ_reser+" bar / "+o_Vehicle.GetEngineParam("equaliser-pressure")+" g/m3</font></td>"+            "</tr>"+                           "<tr>"+                "<td><font>Train Brake</font></td>"+                "<td align=center><font>"+train_brake+" bar / "+o_Vehicle.GetEngineParam("brake-pipe-pressure")+" g/m3</font></td>"+            "</tr>"+            "<tr>"+                "<td><font>Brake Cylinder</font></td>"+                "<td align=center><font>"+brake_cyl+" bar / "+o_Vehicle.GetEngineParam("brake-cylinder-pressure")+" g/m3</font></td>"+            "</tr>";                                              }            Control=Control+        "<tr bgcolor=#000000>"+             "<td align=center colspan=2><font>Controls</font></td>"+         "</tr>"+         "<tr>"+             "<td><font>Train Brake Modes</font></td>"+             "<td align=center><font>"+tbm_result+"</font></td>"+         "</tr>";         if(b_isloco)         {             Control=Control+             "<tr>"+                 "<td><font>Pantograph States</font></td>"+                 "<td align=center><font>"+pant_result+"</font></td>"+             "</tr>";         }                string schedule_state;        if(o_Train.GetScheduleState() == 0) schedule_state="None";        if(o_Train.GetScheduleState() == 1) schedule_state="Junction";        if(o_Train.GetScheduleState() == 2) schedule_state="Junction_track";        if(o_Train.GetScheduleState() == 3) schedule_state="Driving";        if(o_Train.GetScheduleState() == 4) schedule_state="Track";        if(o_Train.GetScheduleState() == 5) schedule_state="Stop";        if(o_Train.GetScheduleState() == 6) schedule_state="Vehicle";        if(o_Train.GetScheduleState() == 7) schedule_state="Turnaround";                                          Ai=Ai+        "<tr bgcolor=#000000>"+            "<td align=center colspan=2><font>AI</font></td>"+        "</tr>"+        "<tr>"+            "<td><font>Train Control Modes</font></td>"+            "<td align=center><font>"+tcm_result+"</font></td>"+        "</tr>"+        "<tr>"+            "<td><font>Train has timetable</font></td>"+            "<td align=center><font>"+o_Train.HasTrainTimetable()+"</font></td>"+        "</tr>"+            "<tr>"+            "<td><font>Is schedule running</font></td>"+            "<td align=center><font>"+o_Train.IsScheduleRunning()+"</font></td>"+        "</tr>";                     "<tr>"+            "<td><font>Schedule state</font></td>"+            "<td align=center><font>"+schedule_state+": "+o_Train.GetScheduleStateString()+"</font></td>"+        "</tr>";                                  Ether=Ether+        "<tr bgcolor=#000000>"+            "<td align=center colspan=2><font>World and TrackSearch</font></td>"+        "</tr>"+        "<tr>"+            "<td><font>The most closest object on the line</font></td>"+            "<td align=center><font>"+map_object+"</font></td>"+        "</tr>"+        "<tr>"+            "<td><font>Current Train</font></td>"+            "<td align=center><font>"+currentTrain.GetName()+"</font></td>"+        "</tr>";                                                           return HTML="<html><body><table width=100%>"+Header+Enginespec+Control+Ai+Ether+"</table></body</html>";                          }    public string Broadcast(Message msg)    {        string odesilatel;        string prijemce;        string vraceno;        if(msg != null)        {            if(msg.src.isclass(Vehicle))            {                Vehicle Vozidlo = cast <Vehicle> msg.src;                odesilatel = "Vehicle "+Vozidlo.GetLocalisedName();                         }            else if(msg.src.isclass(Train))            {                Train Vlak = cast <Train> msg.src;                odesilatel = "Train "+Vlak.GetName();             }            else if(msg.src.isclass(DriverCharacter))            {                DriverCharacter Strojvedouci = cast <DriverCharacter> msg.src;                odesilatel = "Driver "+Strojvedouci.GetLocalisedName();             }            else if(msg.src.isclass(Signal))            {                Signal Navestidlo = cast <Signal> msg.src;                odesilatel = "Signal "+Navestidlo.GetName();                         }            else if(msg.src.isclass(Track))            {                Track Kolej = cast <Track> msg.src;                odesilatel = "Track "+Kolej.GetId();            }            else if(msg.src.isclass(Junction))            {                Junction Vyhybka = cast <Junction> msg.src;                odesilatel = "Junction "+Vyhybka.GetName();            }            else if(msg.src.isclass(Industry))            {                Industry Prumysl = cast <Industry> msg.src;                odesilatel = "Industry "+Prumysl.GetLocalisedName();                         }            else if(msg.src.isclass(GenericIndustry))            {                GenericIndustry ObecnyPrumysl = cast <GenericIndustry> msg.src;                odesilatel = "GenericIndustry "+ObecnyPrumysl.GetLocalisedName();                         }                  else            {                odesilatel = "Undefined/Unknown";            }                    if(msg.dst != null)            {                if(msg.dst.isclass(Vehicle))                {                    Vehicle Vozidlo = cast <Vehicle> msg.dst;                    prijemce = "Vehicle "+Vozidlo.GetLocalisedName();                             }                else if(msg.dst.isclass(Train))                {                    Train Vlak = cast <Train> msg.dst;                    prijemce = "Train "+Vlak.GetName();                 }                else if(msg.dst.isclass(DriverCharacter))                {                    DriverCharacter Strojvedouci = cast <DriverCharacter> msg.dst;                    prijemce = "Driver "+Strojvedouci.GetLocalisedName();                 }                else if(msg.dst.isclass(Signal))                {                    Signal Navestidlo = cast <Signal> msg.dst;                    prijemce = "Signal "+Navestidlo.GetName();                             }                else if(msg.dst.isclass(Track))                {                    Track Kolej = cast <Track> msg.dst;                    prijemce = "Track "+Kolej.GetId();                }                else if(msg.dst.isclass(Junction))                {                    Junction Vyhybka = cast <Junction> msg.dst;                    prijemce = "Junction "+Vyhybka.GetName();                }                else if(msg.src.isclass(Industry))                {                    Industry Prumysl = cast <Industry> msg.src;                    prijemce = "Industry "+Prumysl.GetLocalisedName();                             }                else if(msg.src.isclass(GenericIndustry))                {                    GenericIndustry ObecnyPrumysl = cast <GenericIndustry> msg.src;                    prijemce = "GenericIndustry "+ObecnyPrumysl.GetLocalisedName();                             }                                    }                else if(msg.dst == null)            {                prijemce = "broadcast";                }            else            {                prijemce = "Undefined/Unknown";            }                    }                           return vraceno="Monovista(Broadcast); "+odesilatel+": "+msg.major+" - "+msg.minor+" => "+prijemce;    }         };